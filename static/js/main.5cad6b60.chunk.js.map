{"version":3,"sources":["actions/actions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["apiUrl","nameCapitalized","s","charAt","toUpperCase","slice","App","useState","list","setList","loading","setLoading","imageloading","setImageLoading","image","setImage","favs","setFavs","selectedOption","setSelectedOption","selectedImage","setSelectedImage","useEffect","axios","get","then","message","data","result","key","length","map","value","push","title","toLowerCase","handleChange","e","name","urls","undefined","className","Autocomplete","id","options","getOptionLabel","option","style","width","marginBottom","renderInput","params","TextField","label","variant","InputProps","onChange","endAdornment","Fragment","CircularProgress","color","size","type","onClick","find","fav","url","index","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5cad6b60.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { ListAllResponseDTO, ImageDTO } from \"../models/types\";\r\n\r\nconst apiUrl = 'https://dog.ceo/api/';\r\n\r\nexport const getListAll = () => {\r\n  return axios.get<ListAllResponseDTO>(`${apiUrl}breeds/list/all`);\r\n};\r\n\r\nexport const getImage = (name: string) => {\r\n  return axios.get<ImageDTO>(`${apiUrl}breed/${name}/images`);\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n// import styled from \"styled-components\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport './App.css';\r\nimport { getListAll, getImage } from './actions/actions';\r\n\r\n// interface ImageContainerProp {\r\n//   active?: boolean;\r\n// }\r\n// const ImageContainer = styled.div<ImageContainerProp>`\r\n//   margin-bottom: 10px;\r\n//   ${props => props.active && `\r\n//     border: 1px solid red;\r\n//   `}\r\n// `;\r\n\r\nfunction nameCapitalized(s: string) {\r\n  if (typeof s !== 'string') return ''\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n}\r\n\r\ninterface Option {\r\n  title: string;\r\n  value: string;\r\n}\r\n\r\ninterface Image {\r\n  urls: string[];\r\n  title: string;\r\n}\r\n\r\nfunction App() {\r\n  const [list, setList] = useState<Option[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageloading, setImageLoading] = useState(false);\r\n  const [image, setImage] = useState<Image>();\r\n  const [favs, setFavs] = useState<Option[]>([]);\r\n  const [selectedOption, setSelectedOption] = useState<Option>();\r\n  const [selectedImage, setSelectedImage] = useState<string>();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    getListAll().then(({data}) => {\r\n      const message = data.message;\r\n      const result: Option[] = [];\r\n      for (const key in message) {\r\n        if (message[key].length > 0) {\r\n          message[key].map(value => {\r\n            result.push({\r\n              title: nameCapitalized(value) + ' ' + nameCapitalized(key),\r\n              value: key.toLowerCase() + '/' + value.toLowerCase(),\r\n            });\r\n            return value;\r\n          })\r\n        } else {\r\n          result.push({ title: nameCapitalized(key), value: key.toLowerCase()});\r\n        }\r\n      }\r\n      setList(result);\r\n      setLoading(false);\r\n    })\r\n  }, []);\r\n\r\n  const handleChange = (e: object, value: Option | null) => {\r\n    if (value) {\r\n      setSelectedOption(value);\r\n      setImageLoading(true);\r\n      getImage(value.value).then(({data}) => {\r\n        setImageLoading(false);\r\n        setImage({\r\n          urls: data.message.length > 5 ? data.message.slice(0, 5) : data.message,\r\n          title: value.title,\r\n        });\r\n      })\r\n    } else {\r\n      setImageLoading(false);\r\n      setImage(undefined);\r\n      setSelectedOption(undefined);\r\n    }\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    if (selectedOption) {\r\n      const matched = favs.find(fav => fav.title === selectedOption.title);\r\n      if (!matched) {\r\n        setFavs([\r\n          ...favs,\r\n          selectedOption,\r\n        ]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleImageSelect = (name: string) => {\r\n    if (selectedImage && name === selectedImage) {\r\n      setSelectedImage(undefined);\r\n    } else {\r\n      setSelectedImage(name);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Autocomplete\r\n        loading={loading}\r\n        id=\"fav-list\"\r\n        options={favs}\r\n        getOptionLabel={option => option.title}\r\n        style={{ width: '100%', marginBottom: '20px' }}\r\n        renderInput={params => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Saved List\"\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps\r\n            }}\r\n          />\r\n        )}\r\n        onChange={handleChange}\r\n      />\r\n\r\n      <Autocomplete\r\n        loading={loading}\r\n        id=\"combo-box-demo\"\r\n        options={list}\r\n        getOptionLabel={option => option.title}\r\n        style={{ width: '100%' }}\r\n        renderInput={params => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Breeds List\"\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <React.Fragment>\r\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                  {params.InputProps.endAdornment}\r\n                </React.Fragment>\r\n              ),\r\n            }}\r\n          />\r\n        )}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"button\" onClick={handleSaveClick}>Save</button>\r\n      <div className=\"image-box\">\r\n        {imageloading && <CircularProgress color=\"inherit\" size={20} />}\r\n        {image && image.urls.map((url, index) => (\r\n          <div\r\n            style={{ marginBottom: '0.5rem'}}\r\n            key={`${image.title}-${index}`}\r\n            className={`image-wrapper ${selectedImage === `${image.title}-${index}` ? 'active' : ''}`}\r\n            onClick={() => handleImageSelect(`${image.title}-${index}`)}\r\n          >\r\n            <img className=\"image\" src={url} alt={image.title} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}