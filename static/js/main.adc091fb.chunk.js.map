{"version":3,"sources":["actions/actions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["apiUrl","nameCapitalized","s","charAt","toUpperCase","slice","App","useState","list","setList","loading","setLoading","imageloading","setImageLoading","image","setImage","useEffect","axios","get","then","message","data","result","key","length","map","value","push","title","toLowerCase","className","Autocomplete","id","options","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","onChange","e","name","url","undefined","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"2TAGMA,EAAS,uBCKf,SAASC,EAAgBC,GACvB,MAAiB,kBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,GA2F9BC,MA9Ef,WAAgB,IAAD,EACWC,mBAAmB,IAD9B,mBACNC,EADM,KACAC,EADA,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAG2BJ,oBAAS,GAHpC,mBAGNK,EAHM,KAGQC,EAHR,OAIaN,qBAJb,mBAINO,EAJM,KAICC,EAJD,KA4Cb,OAtCAC,qBAAU,WACRL,GAAW,GDxBNM,IAAMC,IAAN,UAAiClB,EAAjC,oBCyBQmB,MAAK,YAAa,IACvBC,EADsB,EAAVC,KACGD,QACfE,EAAmB,GAFG,WAGjBC,GACLH,EAAQG,GAAKC,OAAS,EACxBJ,EAAQG,GAAKE,KAAI,SAAAC,GAKf,OAJAJ,EAAOK,KAAK,CACVC,MAAO3B,EAAgByB,GAAS,IAAMzB,EAAgBsB,GACtDG,MAAOA,EAAMG,cAAgB,IAAMN,EAAIM,gBAElCH,KAGTJ,EAAOK,KAAK,CAAEC,MAAO3B,EAAgBsB,GAAMG,MAAOH,EAAIM,iBAV1D,IAAK,IAAMN,KAAOH,EAAU,EAAjBG,GAaXd,EAAQa,GACRX,GAAW,QAEZ,IAkBD,yBAAKmB,UAAU,OACb,kBAACC,EAAA,EAAD,CACErB,QAASA,EACTsB,GAAG,iBACHC,QAASzB,EACT0B,eAAgB,SAAAC,GAAM,OAAIA,EAAOP,OACjCQ,MAAO,CAAEC,MAAO,QAChBC,YAAa,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,cACNC,QAAQ,WACRC,WAAU,eACLJ,EAAOI,WADF,CAERC,aACE,kBAAC,IAAMC,SAAP,KACGnC,EAAU,kBAACoC,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KAAS,KAC3DT,EAAOI,WAAWC,oBAM7BK,SAvCe,SAACC,EAAWxB,GD3CX,IAACyB,EC4CjBzB,GACFb,GAAgB,ID7CGsC,EC8CVzB,EAAMA,MD7CZT,IAAMC,IAAN,UAAuBlB,EAAvB,iBAAsCmD,EAAtC,oBC6CmBhC,MAAK,YAAa,IAAXE,EAAU,EAAVA,KAC3BR,GAAgB,GAChBE,EAAS,CACPqC,IAAK/B,EAAKD,QACVQ,MAAOF,EAAME,YAIjBb,OAASsC,MA8BT,yBAAKvB,UAAU,aACZlB,GAAgB,kBAACkC,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KACxDlC,GAAS,yBAAKgB,UAAU,QAAQwB,IAAKxC,EAAMsC,IAAKG,IAAKzC,EAAMc,WCnFhD4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnD,c","file":"static/js/main.adc091fb.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { ListAllResponseDTO, ImageDTO } from \"../models/types\";\n\nconst apiUrl = 'https://dog.ceo/api/';\n\nexport const getListAll = () => {\n  return axios.get<ListAllResponseDTO>(`${apiUrl}breeds/list/all`);\n};\n\nexport const getImage = (name: string) => {\n  return axios.get<ImageDTO>(`${apiUrl}breed/${name}/images/random`);\n}\n","import React, { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport './App.css';\nimport { getListAll, getImage } from './actions/actions';\n\nfunction nameCapitalized(s: string) {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\ninterface Option {\n  title: string;\n  value: string;\n}\n\ninterface Image {\n  url: string;\n  title: string;\n}\n\nfunction App() {\n  const [list, setList] = useState<Option[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [imageloading, setImageLoading] = useState(false);\n  const [image, setImage] = useState<Image>();\n\n  useEffect(() => {\n    setLoading(true);\n    getListAll().then(({data}) => {\n      const message = data.message;\n      const result: Option[] = [];\n      for (const key in message) {\n        if (message[key].length > 0) {\n          message[key].map(value => {\n            result.push({\n              title: nameCapitalized(value) + ' ' + nameCapitalized(key),\n              value: value.toLowerCase() + ' ' + key.toLowerCase(),\n            });\n            return value;\n          })\n        } else {\n          result.push({ title: nameCapitalized(key), value: key.toLowerCase()});\n        }\n      }\n      setList(result);\n      setLoading(false);\n    })\n  }, []);\n\n  const handleChange = (e: object, value: Option | null) => {\n    if (value) {\n      setImageLoading(true);\n      getImage(value.value).then(({data}) => {\n        setImageLoading(false);\n        setImage({\n          url: data.message,\n          title: value.title,\n        });\n      })\n    } else {\n      setImage(undefined);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Autocomplete\n        loading={loading}\n        id=\"combo-box-demo\"\n        options={list}\n        getOptionLabel={option => option.title}\n        style={{ width: '100%' }}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label=\"Breeds List\"\n            variant=\"outlined\"\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <React.Fragment>\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n          />\n        )}\n        onChange={handleChange}\n      />\n      <div className=\"image-box\">\n        {imageloading && <CircularProgress color=\"inherit\" size={20} />}\n        {image && <img className=\"image\" src={image.url} alt={image.title} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}